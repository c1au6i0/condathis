% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/run.R
\name{run}
\alias{run}
\title{Run Command Line tools in a Conda environment.}
\usage{
run(
  cmd,
  ...,
  env_name = "condathis-env",
  method = c("native", "auto", "docker", "singularity"),
  container_name = "condathis-micromamba-base",
  image_name = "luciorq/condathis-micromamba:latest",
  mount_paths = NULL,
  packages = NULL,
  channels = c("bioconda", "conda-forge"),
  additional_channels = NULL,
  sif_image_path = NULL,
  gpu_container = FALSE,
  verbose = TRUE,
  stdout = "|"
)
}
\arguments{
\item{cmd}{Character. The main command to be executed in the Conda environment.}

\item{...}{Additional arguments to be used in the command. These arguments will be passed directly to the command executed in the Conda environment.
File paths should not contain special character or spaces.}

\item{env_name}{Character. The name of the Conda environment where the tool will be run. Defaults to 'condathis-env'. If the specified environment does not exist, it will be created automatically using create_env() function from the \code{condathis} package.}

\item{method}{Character. Beckend method to run \code{micromamba}, the default is
"auto" running "native" with the \code{micromamba} binaries installed
by \code{condathis}. Additional methods are supported for using Docker Linux Containers
"docker" and Singularity Containers "singularity" as the beckends,
those are especially useful if running on systems where the Conda
recipes are not available for the OS or CPU architecture in place.
The container-based backends leverage \code{dockerthis} R package.}

\item{container_name}{Character. Name of the Container created by Docker.
Defaults to \code{"condathis-micromamba-base"}.}

\item{image_name}{Character. Name of the Docker Image used, it will try
to pull it automatically if internet connection is available.
Defaults to \code{"luciorq/condathis-micromamba:latest"}.}

\item{mount_paths}{Character vector. Host paths to be mounted in container.}

\item{packages}{Character vector. Names of the packages, and
version strings if necessary, e.g. 'python=3.11'. The use of the \code{packages}
argument assumes that env_file is not used.}

\item{channels}{Character vector. Names of the channels to be included.
By default 'c("bioconda", "conda-forge")' are used for solving
dependencies.}

\item{additional_channels}{Character. Additional Channels to be added to the
default ones.}

\item{sif_image_path}{Character. Path to SIF image file.}

\item{gpu_container}{Logical. GPU support for Container Beckend \code{methods}.
This argument is not necessary if running native.
Default to FALSE.}

\item{verbose}{Logical. Should command and messages be print to
the console.
Defaults to \code{TRUE}.}

\item{stdout}{Default: "|" keep stdout to the R object
returned by \code{run()}.
A character string can be used to define a file path to be used as standard output. e.g: "output.txt".}
}
\description{
This function allows the execution of command line tools within a specific Conda environment.
It runs the provided cmd command in the designated Conda environment,
using the Micromamba binaries managed by the \code{condathis} package.
}
\examples{
\dontrun{
## Run a simple command in the default Conda environment
run("ls", "-l")

## Run a command in a specific Conda environment
run("python script.py", env_name = "my-conda-env")

## Run a command with additional arguments
run("my-command", "--arg1", "--arg2=value", env_name = "my-conda-env")
}
}
\seealso{
\code{\link{install_micromamba}}, \code{\link{create_env}}
}
